"Hello "world!

numTest on Int
==============
2147483647 + -2147483648 = -1
2147483647 * -2147483648 = -2147483648

numTest on Integer
==================
100000000000000009 + 200000000000000008 = 300000000000000017
100000000000000009 * 200000000000000008 = 20000000000000002600000000000000072

numTest on Bits8
================
FF + FF = FE
FF * FF = 01

numTest on Bits16
=================
1001 + 0200 = 1201
1001 * 0200 = 0200

numTest on Bits32
=================
00800000 + 00080000 = 00880000
00800000 * 00080000 = 00000000

numTest on Bits64
=================
7FFFFFFFFFFFFFFF + 0001000000000000 = 8000FFFFFFFFFFFF
7FFFFFFFFFFFFFFF * 0001000000000000 = FFFF000000000000

numTest on Double
=================
24.234234 + 75676.23232 = 75700.466554
24.234234 * 75676.23232 = 1833955.5222812428

integralTest on Int
===================
2147483647 div -2147483648 = 0

integralTest on Integer
=======================
100000000000000009 div 200000000000000008 = 0

integralTest on Bits8
=====================
FF div FF = 01

integralTest on Bits16
======================
1001 div 0200 = 0008

integralTest on Bits32
======================
00800000 div 00080000 = 00000010

integralTest on Bits64
======================
7FFFFFFFFFFFFFFF div 0001000000000000 = 0000000000007FFF

fractionalTest on Double
========================
24.234234 / 75676.23232 = 3.2023573659857384E-4
recip 24.234234 = 0.04126394091927973
recip 75676.23232 = 1.3214188515245576E-5

ordTest on Int
==============
compare 2147483647 -2147483648 = GT

ordTest on Integer
==================
compare 100000000000000009 200000000000000008 = LT

ordTest on Bits8
================
compare FF FF = EQ

ordTest on Bits16
=================
compare 1001 0200 = GT

ordTest on Bits32
=================
compare 00800000 00080000 = GT

ordTest on Bits64
=================
compare 7FFFFFFFFFFFFFFF 0001000000000000 = GT

ordTest on Double
=================
compare 24.234234 75676.23232 = LT

[(3, (4, 5)), (6, (8, 10)), (5, (12, 13)), (9, (12, 15)), (8, (15, 17)), (12, (16, 20)), (15, (20, 25)), (7, (24, 25)), (10, (24, 26)), (20, (21, 29)), (18, (24, 30)), (16, (30, 34)), (21, (28, 35)), (12, (35, 37)), (15, (36, 39)), (24, (32, 40)), (9, (40, 41)), (27, (36, 45)), (30, (40, 50)), (14, (48, 50))]
(3 ** ['d', 'c', 'a'])
(3 ** [3, 4, 5])
(5 ** [02, 04, 06, 05, 03])
(2 ** [0005, 0003])
(3 ** [00000002, 00000005, 00000003])
(4 ** [0000000000000002, 0000000000000004, 0000000000000006, 0000000000000005])
(3 ** [0.5, 2.0, 4.5])
(4 ** [1.3, 1.5, 1.9, 2.5])
(3 ** ["hello", "world", "!"])
"[[[[null, null, null, foo], [null, null, null, null]], [[null, null, null, null], [null, null, null, null]]], [[[null, null, null, null], [null, null, null, null]], [[null, null, null, null], [null, null, null, null]]], [[[null, null, null, null], [null, null, null, null]], [[null, null, null, null], [null, null, null, null]]]]"
"foo"
2
3
"[[3, 33], [4, 44], [5, 55]]"
foo
nothing
just
[("", (Just 10, "")), ("", (Just 15, "")), ("", (Just 23, "")), ("", (Nothing, ""))]
